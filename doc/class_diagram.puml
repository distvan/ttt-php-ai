@startuml
class App\Application\Application {
 + __construct($dispatcher: Dispatcher) : void
 + run($request: ServerRequestInterface) : void
 - emit($response: ResponseInterface) : void
}

interface App\Application\Contracts\AIAssistant {
 + suggestMove($board: Board, $model: string) : array
}

class App\Application\Services\AIAssistant {
 + __construct($openAIClient: OpenAIClient) : void
 + suggestMove($board: Board, $model: mixed) : array
 - cleanJsonBlock($input: string) : array
 # generatePrompt($board: array) : string
}

interface App\Domain\Contracts\OpenAIClient {
 + chat($messages: array, $model: string, $temperature: float) : string
}

interface App\Domain\Contracts\Storage {
 + save($key: string, $value: mixed) : void
 + load($key: string) : mixed
 + delete($key: string) : void
 + exists($key: string) : bool
 + clear() : void
}

class App\Domain\Game\Board {
 - board : array
 - size : int
 + createEmptyBoard($size: int) : void
 + getBoard() : array
 + setBoard($board: array) : void
 + validateBoard($board: array) : void
 + getWinner() : string
 - getColumns() : array
 - getDiagonals() : array
 - allEqual($cells: array) : bool
 + hasNoWinnerButBoardIsFull() : bool
 + isFull() : bool
 + isValidMove($row: int, $col: int) : bool
 + applyMove($row: int, $col: int, $player: string) : void
}

class App\Http\Controllers\BoardController {
 + __construct($logger: LoggerInterface, $board: Board, $storage: Storage) : void
 + __invoke($request: ServerRequestInterface) : ResponseInterface
 + mark($request: ServerRequestInterface, $aiAssistant: AIAssistant) : ResponseInterface
 - getResultValue($success: bool, $data: mixed) : array
}

class App\Http\Controllers\IndexController {
 + __construct($view: View) : void
 + __invoke($request: ServerRequestInterface) : ResponseInterface
}

class App\Infrastructure\Container\Container {
 # bindings : array
 # instances : array
 + bind($id: string, $resolver: string|callable) : void
 + get($id: string) : mixed
 + has($id: string) : bool
}

class App\Infrastructure\Exception\KernelException {
}

class App\Infrastructure\Exception\NotFoundException {
}

class App\Infrastructure\Exception\OpenAIException {
}

interface App\Infrastructure\Http\Contracts\RouterInterface {
 + add($method: string, $path: string, $handler: callable) : void
 + match($request: ServerRequestInterface) : ?callable
}

class App\Infrastructure\Http\Curl\CurlExecutor {
 - statusCode : int
 - headerSize : int
 + execute($options: array) : string
 + getStatusCode() : int
 + getHeaderSize() : int
}

class App\Infrastructure\Http\Curl\CurlHttpClient {
 + __construct($optionsBuilder: CurlRequestOptionsBuilder, $executor: CurlExecutor, $responseParser: CurlResponseParser) : void
 + sendRequest($request: RequestInterface) : ResponseInterface
}

class App\Infrastructure\Http\Curl\CurlRequestOptionsBuilder {
 + build($request: RequestInterface) : array
}

class App\Infrastructure\Http\Curl\CurlResponseParser {
 + __construct($responseFactory: ResponseFactoryInterface, $streamFactory: StreamFactoryInterface, $executor: CurlExecutor) : void
 + parse($raw: string) : ResponseInterface
}

class App\Infrastructure\Http\Dispatcher {
 + __construct($router: RouterInterface) : void
 + handle($request: ServerRequestInterface) : ResponseInterface
}

class App\Infrastructure\Http\Routing\Route {
 + __construct($method: string, $path: string, $handler: mixed) : void
 + matches($request: ServerRequestInterface) : bool
}

class App\Infrastructure\Http\Routing\Router {
 - routes : array
 + add($method: string, $path: string, $handler: callable) : void
 + match($request: ServerRequestInterface) : ?callable
}

class App\Infrastructure\Kernel\Kernel {
 + __construct($container: ContainerInterface, $providers: array) : void
 + getContainer() : ContainerInterface
 + registerProviders($providerClasses: array) : void
}

class App\Infrastructure\Minimax\MinimaxAssistant {
 + suggestMove($board: Board, $model: mixed) : array
 - minimax($board: Board, $depth: int, $isMaximizing: bool) : int
}

class App\Infrastructure\OpenAI\OpenAIClient {
 + __construct($httpClient: ClientInterface, $requestFactory: RequestFactoryInterface, $streamFactory: StreamFactoryInterface, $apiKey: string, $baseUrl: string) : void
 + chat($messages: array, $model: string, $temperature: float) : string
 - parseResponse($response: ResponseInterface) : string
}

class App\Infrastructure\Providers\AIAssistantServiceProvider {
 + register($container: ContainerInterface) : void
}

class App\Infrastructure\Providers\AIClientServiceProvider {
 + register($container: ContainerInterface) : void
}

class App\Infrastructure\Providers\StorageServiceProvider {
 + register($container: ContainerInterface) : void
}

class App\Shared\Config\Config {
 # basePath : string
 + __construct($basePath: string) : void
 + get($file: string) : array
}

interface App\Shared\Contracts\ServiceProvider {
 + register($container: ContainerInterface) : void
}

class App\Shared\Exception\ConfigException {
}

class App\Shared\ContainerException {
}

class App\Shared\Exception\CurlException {
}

class App\Shared\Exception\FileNotFoundException {
}

class App\Shared\Exception\InvalidMoveException {
}

class App\Shared\Http\JsonResponseFactory {
 + create($data: array, $status: int, $options: int) : ResponseInterface
}

class App\Shared\Logging\LoggerFactory {
 + create($channel: string) : Logger
}

class App\Shared\View {
 # viewsPath : string
 # layoutsPath : string
 + __construct($viewsPath: string, $layoutsPath: string) : void
 + render($view: string, $data: array, $layout: string) : ResponseInterface
 - replacePlaceholders($template: string, $data: array) : string
}

class App\Storage\SessionStorage {
 - namespace : string
 - logger : mixed
 + __construct($logger: LoggerInterface, $namespace: string) : void
 + save($key: string, $value: mixed) : void
 + load($key: string) : mixed
 + delete($key: string) : void
 + exists($key: string) : bool
 + clear() : void
 - ensureSessionStarted() : void
}

App\Application\Contracts\AIAssistant <|.. App\Application\Services\AIAssistant
Psr\Container\ContainerInterface <|.. App\Infrastructure\Container\Container
Exception <|-- App\Infrastructure\Exception\KernelException
Exception <|-- App\Infrastructure\Exception\NotFoundException
Psr\Container\NotFoundExceptionInterface <|.. App\Infrastructure\Exception\NotFoundException
RuntimeException <|-- App\Infrastructure\Exception\OpenAIException
Psr\Http\Client\ClientInterface <|.. App\Infrastructure\Http\Curl\CurlHttpClient
App\Infrastructure\Http\Contracts\RouterInterface <|.. App\Infrastructure\Http\Routing\Router
App\Application\Contracts\AIAssistant <|.. App\Infrastructure\Minimax\MinimaxAssistant
App\Domain\Contracts\OpenAIClient <|.. App\Infrastructure\OpenAI\OpenAIClient
App\Shared\Contracts\ServiceProvider <|.. App\Infrastructure\Providers\AIAssistantServiceProvider
App\Shared\Contracts\ServiceProvider <|.. App\Infrastructure\Providers\AIClientServiceProvider
App\Shared\Contracts\ServiceProvider <|.. App\Infrastructure\Providers\StorageServiceProvider
Exception <|-- App\Shared\Exception\ConfigException
Exception <|-- App\Shared\ContainerException
Psr\Container\ContainerExceptionInterface <|.. App\Shared\ContainerException
RuntimeException <|-- App\Shared\Exception\CurlException
Exception <|-- App\Shared\Exception\FileNotFoundException
Exception <|-- App\Shared\Exception\InvalidMoveException
App\Domain\Contracts\Storage <|.. App\Storage\SessionStorage
@enduml